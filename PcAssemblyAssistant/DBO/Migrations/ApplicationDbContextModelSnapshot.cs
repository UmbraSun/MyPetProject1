// <auto-generated />
using System;
using DAL.DbContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace PcAssemblyAssistant.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("DAL.Entities.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("DAL.Entities.CPU", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("CoreAndArchitectureId")
                        .HasColumnType("int");

                    b.Property<int?>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("Descriptions")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("FrequencyAndOverclockingCapabilityId")
                        .HasColumnType("int");

                    b.Property<int?>("GPUId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("ParametrsId")
                        .HasColumnType("int");

                    b.Property<int?>("RAMoptionsId")
                        .HasColumnType("int");

                    b.Property<int?>("ThermalCharacteristicksId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CoreAndArchitectureId");

                    b.HasIndex("CountryId");

                    b.HasIndex("FrequencyAndOverclockingCapabilityId");

                    b.HasIndex("GPUId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("ParametrsId");

                    b.HasIndex("RAMoptionsId");

                    b.HasIndex("ThermalCharacteristicksId");

                    b.ToTable("CPUs");
                });

            modelBuilder.Entity("DAL.Entities.CPUCoreAndArchitecture", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Core")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("L2CacheSize")
                        .HasColumnType("int");

                    b.Property<int?>("L3CacheSize")
                        .HasColumnType("int");

                    b.Property<int>("MaxNumberOfThread")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfCores")
                        .HasColumnType("int");

                    b.Property<int?>("NumberOfEfficientCores")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfPerformanceCores")
                        .HasColumnType("int");

                    b.Property<string>("ProcessTechnology")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UnitOfL2CacheSize")
                        .HasColumnType("int");

                    b.Property<int?>("UnitOfL3CacheSize")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("CPUCoreAndArchitectures");
                });

            modelBuilder.Entity("DAL.Entities.CPUFrequencyAndOverclockingCapability", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("FreeMultiplier")
                        .HasColumnType("bit");

                    b.Property<int>("Frequency")
                        .HasColumnType("int");

                    b.Property<int?>("FrequencyOfEfficientCores")
                        .HasColumnType("int");

                    b.Property<int?>("MaxFrequencyInTurbo")
                        .HasColumnType("int");

                    b.Property<int?>("MaxFrequencyTurboOfEfficientCores")
                        .HasColumnType("int");

                    b.Property<int>("UnitFrequecy")
                        .HasColumnType("int");

                    b.Property<int?>("UnitFrequencyOfEfficientCores")
                        .HasColumnType("int");

                    b.Property<int?>("UnitMaxFrequencyInTurbo")
                        .HasColumnType("int");

                    b.Property<int?>("UnitMaxFrequencyTurboOfEfficientCores")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("CPUFrequencyAndOverclockingCapabilities");
                });

            modelBuilder.Entity("DAL.Entities.CPUGeneralParametrs", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RealiseDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Socket")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UnitOfСonsumption")
                        .HasColumnType("int");

                    b.Property<int>("Сonsumption")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("CPUGeneralParametrs");
                });

            modelBuilder.Entity("DAL.Entities.CPUGraphicsCore", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ExecutiveBlocks")
                        .HasColumnType("int");

                    b.Property<int>("GPUCoreFreqency")
                        .HasColumnType("int");

                    b.Property<string>("GPUModel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UnitOfGPUCoreFreqency")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("CPUGraphicsCores");
                });

            modelBuilder.Entity("DAL.Entities.CPURAMoptions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("MaxSuppMemory")
                        .HasColumnType("int");

                    b.Property<int>("MaximumRAMfrequency")
                        .HasColumnType("int");

                    b.Property<string>("MemoryType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumberOfMemoryChanel")
                        .HasColumnType("int");

                    b.Property<int>("UnitOfMaxSuppMemory")
                        .HasColumnType("int");

                    b.Property<int>("UnitOfMaximumRAMfrequency")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("CPURAMoptions");
                });

            modelBuilder.Entity("DAL.Entities.CPUThermalCharacteristicks", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("MaxCPUtemprature")
                        .HasColumnType("int");

                    b.Property<int>("TDP")
                        .HasColumnType("int");

                    b.Property<int>("UnitOfTDP")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("CPUThermalCharacteristicks");
                });

            modelBuilder.Entity("DAL.Entities.GPU", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ForMining")
                        .HasColumnType("bit");

                    b.Property<int?>("GPUConnectionId")
                        .HasColumnType("int");

                    b.Property<int?>("GPUCoolingSystemId")
                        .HasColumnType("int");

                    b.Property<int?>("GPUGeneralParametrsId")
                        .HasColumnType("int");

                    b.Property<int?>("GPUImageOutputId")
                        .HasColumnType("int");

                    b.Property<int?>("GPUVideoMemorySpecificId")
                        .HasColumnType("int");

                    b.Property<int?>("GPUVideoProcessorSpecificId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProducerCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("GPUConnectionId");

                    b.HasIndex("GPUCoolingSystemId");

                    b.HasIndex("GPUGeneralParametrsId");

                    b.HasIndex("GPUImageOutputId");

                    b.HasIndex("GPUVideoMemorySpecificId");

                    b.HasIndex("GPUVideoProcessorSpecificId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("GPU");
                });

            modelBuilder.Entity("DAL.Entities.GPUConnection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AdditPowerConnectors")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConnectionFormFactor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConnectionInterface")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RecommendedPSU")
                        .HasColumnType("int");

                    b.Property<int>("UnitOfRecommendedPSU")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("GPUConnections");
                });

            modelBuilder.Entity("DAL.Entities.GPUCoolingSystem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CoolingType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LiquidCoolingRadiator")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TypeAndNumOfInstalledFans")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("GPUCoolingSystems");
                });

            modelBuilder.Entity("DAL.Entities.GPUGeneralParametrs", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("GraphicProcessor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Microarchitecture")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProccessTechnology")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UnitOfСonsumption")
                        .HasColumnType("int");

                    b.Property<int>("Сonsumption")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("GPUGeneralParametrs");
                });

            modelBuilder.Entity("DAL.Entities.GPUImageOutput", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<float>("DisplayPortVersion")
                        .HasColumnType("real");

                    b.Property<string>("MaxResolution")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumOfMonitorConnect")
                        .HasColumnType("int");

                    b.Property<string>("VideoConnectors")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("GPUImageOutputs");
                });

            modelBuilder.Entity("DAL.Entities.GPUVideoMemorySpecific", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("EffectiveMemoryFrequency")
                        .HasColumnType("int");

                    b.Property<string>("MaxMemoryBandwidth")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MemoryBusWidht")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MemoryType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UnitOfEffectiveMemoryFrequency")
                        .HasColumnType("int");

                    b.Property<int>("UnitOfVideoMemorySize")
                        .HasColumnType("int");

                    b.Property<int>("VideoMemorySize")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("GPUVideoMemorySpecific");
                });

            modelBuilder.Entity("DAL.Entities.GPUVideoProcessorSpecific", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("HardwareAcceleratedRayTracing")
                        .HasColumnType("int");

                    b.Property<int>("NominalFrequencyOfTheVideoChip")
                        .HasColumnType("int");

                    b.Property<int?>("NumOfROPs")
                        .HasColumnType("int");

                    b.Property<int>("NumOfTextureUnits")
                        .HasColumnType("int");

                    b.Property<int>("NumOfUniversalProcessors")
                        .HasColumnType("int");

                    b.Property<bool>("RayTracingSupport")
                        .HasColumnType("bit");

                    b.Property<float>("ShaderVersion")
                        .HasColumnType("real");

                    b.Property<int>("TensorCores")
                        .HasColumnType("int");

                    b.Property<int>("TurboFrequency")
                        .HasColumnType("int");

                    b.Property<int>("UnitNominalFreqOfTheVideoChip")
                        .HasColumnType("int");

                    b.Property<int>("UnitTurboFrequency")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("GPUVideoProcessorSpecifics");
                });

            modelBuilder.Entity("DAL.Entities.HDD", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("HDDAdditionallyId")
                        .HasColumnType("int");

                    b.Property<int?>("HDDMechanicsAndReliabilityId")
                        .HasColumnType("int");

                    b.Property<int?>("HDDStorageDeviceId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("HDDAdditionallyId");

                    b.HasIndex("HDDMechanicsAndReliabilityId");

                    b.HasIndex("HDDStorageDeviceId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("HDDs");
                });

            modelBuilder.Entity("DAL.Entities.HDDAdditionally", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("MaxOperatingTemp")
                        .HasColumnType("int");

                    b.Property<int>("MaxPowerConsumption")
                        .HasColumnType("int");

                    b.Property<int>("MinOperatingTemp")
                        .HasColumnType("int");

                    b.Property<int>("StandbyPowerConsumpiton")
                        .HasColumnType("int");

                    b.Property<int>("UnitMaxPowerConsumption")
                        .HasColumnType("int");

                    b.Property<int>("UnitOfСonsumption")
                        .HasColumnType("int");

                    b.Property<int>("UnitStandbyPowerConsumpiton")
                        .HasColumnType("int");

                    b.Property<int>("Сonsumption")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("HDDAdditionallies");
                });

            modelBuilder.Entity("DAL.Entities.HDDMechanicsAndReliability", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("NoiseLevelDuring")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NoiseLevelInIdle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RecordingTechnology")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShockResistAtWork")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("HDDMechanicsAndReliabilities");
                });

            modelBuilder.Entity("DAL.Entities.HDDStorageDevice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CacheSize")
                        .HasColumnType("int");

                    b.Property<string>("IntarfaceHDD")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InterfaceBandwidth")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MaxDataTransferRate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("OptForRAIDarrays")
                        .HasColumnType("bit");

                    b.Property<string>("SpindleSpeed")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UnitOfCacheSize")
                        .HasColumnType("int");

                    b.Property<int>("UnitOfVolumeHDD")
                        .HasColumnType("int");

                    b.Property<int>("VolumeHDD")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("HDDStorageDevices");
                });

            modelBuilder.Entity("DAL.Entities.MB", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MBAudioId")
                        .HasColumnType("int");

                    b.Property<int?>("MBBackPanelId")
                        .HasColumnType("int");

                    b.Property<int?>("MBCollingAndPowerId")
                        .HasColumnType("int");

                    b.Property<int?>("MBExpensionSlotsId")
                        .HasColumnType("int");

                    b.Property<int?>("MBFormFactorId")
                        .HasColumnType("int");

                    b.Property<int?>("MBInternalConnectorsId")
                        .HasColumnType("int");

                    b.Property<int?>("MBRAMId")
                        .HasColumnType("int");

                    b.Property<int?>("MBStorageDeviceId")
                        .HasColumnType("int");

                    b.Property<int?>("MBWebId")
                        .HasColumnType("int");

                    b.Property<int?>("MbCPUandChipsetId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("MBAudioId");

                    b.HasIndex("MBBackPanelId");

                    b.HasIndex("MBCollingAndPowerId");

                    b.HasIndex("MBExpensionSlotsId");

                    b.HasIndex("MBFormFactorId");

                    b.HasIndex("MBInternalConnectorsId");

                    b.HasIndex("MBRAMId");

                    b.HasIndex("MBStorageDeviceId");

                    b.HasIndex("MBWebId");

                    b.HasIndex("MbCPUandChipsetId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("MBs");
                });

            modelBuilder.Entity("DAL.Entities.MBAudio", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("SouncAdapterChipset")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SoundScheme")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("MBAudios");
                });

            modelBuilder.Entity("DAL.Entities.MBBackPanel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CountAndTypeUSB")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CountOfAnalogAudioJacks")
                        .HasColumnType("int");

                    b.Property<int?>("CountOfNetworkPorts")
                        .HasColumnType("int");

                    b.Property<string>("DigitalAudioPorts")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Other")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VideoOutputs")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("MBBackPanels");
                });

            modelBuilder.Entity("DAL.Entities.MBCollingAndPower", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ActiveCooling")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CPUPowerConnector")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MainPowerConnctor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PassiveCooling")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PowerPhases")
                        .HasColumnType("int");

                    b.Property<int>("UnitOfСonsumption")
                        .HasColumnType("int");

                    b.Property<int>("Сonsumption")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("MBCollingAndPowers");
                });

            modelBuilder.Entity("DAL.Entities.MbCPUandChipset", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CPUStirpes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Chipset")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Socket")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("MbCPUandChipsets");
                });

            modelBuilder.Entity("DAL.Entities.MBExpensionSlots", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CountOfPCIExX16Slots")
                        .HasColumnType("int");

                    b.Property<int?>("CountOfPCIExX1Slots")
                        .HasColumnType("int");

                    b.Property<int?>("CountOfPCIorCrossfire")
                        .HasColumnType("int");

                    b.Property<string>("PCIExpressVersion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SupportedPCIorCrossfire")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("MBExpensionSlots");
                });

            modelBuilder.Entity("DAL.Entities.MBFormFactor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("FormFactor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Height")
                        .HasColumnType("int");

                    b.Property<int>("Width")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("MBFormFactor");
                });

            modelBuilder.Entity("DAL.Entities.MBInternalConnectors", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CPUCoolerPowerConnector")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("FanConnectorsPin3")
                        .HasColumnType("int");

                    b.Property<int?>("FanConnectorsPin4")
                        .HasColumnType("int");

                    b.Property<string>("InternalUSBConnectors")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("LEDConnectorPin3")
                        .HasColumnType("int");

                    b.Property<int?>("LEDConnectorPin4")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("MBInternalConnectors");
                });

            modelBuilder.Entity("DAL.Entities.MBRAM", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CountOfRAMChannel")
                        .HasColumnType("int");

                    b.Property<int>("MaxRAMFrequency")
                        .HasColumnType("int");

                    b.Property<int>("MaximumMemory")
                        .HasColumnType("int");

                    b.Property<string>("RAMFormFactor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RAMType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SlotsCount")
                        .HasColumnType("int");

                    b.Property<int>("UnitMaxRAMFrequency")
                        .HasColumnType("int");

                    b.Property<int>("UnitOfMaxMemory")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("MBRAMs");
                });

            modelBuilder.Entity("DAL.Entities.MBStorageDevice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("CountOfM2")
                        .HasColumnType("int");

                    b.Property<int>("CountOfPortsSATA")
                        .HasColumnType("int");

                    b.Property<string>("M2Connectors")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("SupportedNVME")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("MBStorageDevices");
                });

            modelBuilder.Entity("DAL.Entities.MBWeb", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Bluetooth")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BuiltInWifiAdapter")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NetAdapterChipset")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NetAdapterSpeed")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WiFiController")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("MBWebs");
                });

            modelBuilder.Entity("DAL.Entities.PS", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<int?>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("PSCablesAndConnectorsId")
                        .HasColumnType("int");

                    b.Property<int?>("PSCertificationId")
                        .HasColumnType("int");

                    b.Property<int?>("PSCoolingSystemId")
                        .HasColumnType("int");

                    b.Property<int?>("PSElectricalParametrsId")
                        .HasColumnType("int");

                    b.Property<int>("UnitOfCapacity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("PSCablesAndConnectorsId");

                    b.HasIndex("PSCertificationId");

                    b.HasIndex("PSCoolingSystemId");

                    b.HasIndex("PSElectricalParametrsId");

                    b.ToTable("PSs");
                });

            modelBuilder.Entity("DAL.Entities.PSCablesAndConnectors", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CPUPowerConnector")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Floppy4pinConnector")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GPUPowerConnector")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MainPowerConnector")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Molex4PinConnector")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SATA15PinConnector")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PSCablesAndConnectors");
                });

            modelBuilder.Entity("DAL.Entities.PSCertification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Certificate80PLUS")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PowerFactorCorrection")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProtectionTechnologies")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PSCertifications");
                });

            modelBuilder.Entity("DAL.Entities.PSCoolingSystem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CoolingSystem")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FanDiametrs")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SpeedControl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PSCoolingSystems");
                });

            modelBuilder.Entity("DAL.Entities.PSElectricalParametrs", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("LineCurrent12V")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LineCurrent3V")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LineCurrent5V")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LineCurrentMinus12V")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MainInputVoltageRange")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StandbyCurrent")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PSElectricalParametrs");
                });

            modelBuilder.Entity("DAL.Entities.RAM", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProducerCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RAMKitVolumeAndCompositionId")
                        .HasColumnType("int");

                    b.Property<int?>("RAMPerformanceId")
                        .HasColumnType("int");

                    b.Property<int?>("RAMTimingsId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("RAMKitVolumeAndCompositionId");

                    b.HasIndex("RAMPerformanceId");

                    b.HasIndex("RAMTimingsId");

                    b.ToTable("RAMs");
                });

            modelBuilder.Entity("DAL.Entities.RAMKitVolumeAndComposition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("ECCMemory")
                        .HasColumnType("bit");

                    b.Property<string>("FormFactor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MemoryType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumOfModules")
                        .HasColumnType("int");

                    b.Property<string>("Rank")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("RegisterMemory")
                        .HasColumnType("bit");

                    b.Property<int>("TotalAmount")
                        .HasColumnType("int");

                    b.Property<int>("UnitOfСonsumption")
                        .HasColumnType("int");

                    b.Property<int>("UnitTotalAmount")
                        .HasColumnType("int");

                    b.Property<int>("UnitVolumeOfOneModule")
                        .HasColumnType("int");

                    b.Property<int>("VolumeOfOneModule")
                        .HasColumnType("int");

                    b.Property<int>("Сonsumption")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("KitVolumeAndCompositions");
                });

            modelBuilder.Entity("DAL.Entities.RAMPerformance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ClockFrequency")
                        .HasColumnType("int");

                    b.Property<string>("IntelXMPprofiles")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UnitClockFrequency")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("RAMPerformances");
                });

            modelBuilder.Entity("DAL.Entities.RAMTimings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CASLatency")
                        .HasColumnType("int");

                    b.Property<int>("RAStoCASDelay")
                        .HasColumnType("int");

                    b.Property<int>("RowPrechangeDelay")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("RAMTimings");
                });

            modelBuilder.Entity("DAL.Entities.SSD", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("SSDMainCharacteristicsId")
                        .HasColumnType("int");

                    b.Property<int?>("SSDSpeedAndPowerConsumptionId")
                        .HasColumnType("int");

                    b.Property<string>("SSDType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("SSDMainCharacteristicsId");

                    b.HasIndex("SSDSpeedAndPowerConsumptionId");

                    b.ToTable("SSDs");
                });

            modelBuilder.Entity("DAL.Entities.SSDMainCharacteristics", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("FormFactor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("KeyM2Connector")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MemoryStructure")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("NVMe")
                        .HasColumnType("bit");

                    b.Property<string>("PhysicalInterface")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StorageCapacity")
                        .HasColumnType("int");

                    b.Property<int>("UnitOfStorageCapacity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("SSDMainCharacteristics");
                });

            modelBuilder.Entity("DAL.Entities.SSDSpeedAndPowerConsumption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("EnergyConsumption")
                        .HasColumnType("int");

                    b.Property<string>("MaxSequentialReadSpeed")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MaxSequentialWriteSpeed")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RandomReadSpeedOf4KBFiles")
                        .HasColumnType("int");

                    b.Property<int>("RandomWriteSpeedOf4KBFiles")
                        .HasColumnType("int");

                    b.Property<int>("UnitEnergyConsumption")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("SSDSpeedAndPowerConsumptions");
                });

            modelBuilder.Entity("DAL.Identity.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RefreshTokenExpiryTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasFilter("[Email] IS NOT NULL");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("DAL.Entities.CPU", b =>
                {
                    b.HasOne("DAL.Entities.CPUCoreAndArchitecture", "CoreAndArchitecture")
                        .WithMany("CPU")
                        .HasForeignKey("CoreAndArchitectureId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DAL.Entities.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId");

                    b.HasOne("DAL.Entities.CPUFrequencyAndOverclockingCapability", "FrequencyAndOverclockingCapability")
                        .WithMany("CPU")
                        .HasForeignKey("FrequencyAndOverclockingCapabilityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DAL.Entities.CPUGraphicsCore", "GPU")
                        .WithMany("CPU")
                        .HasForeignKey("GPUId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DAL.Entities.CPUGeneralParametrs", "Parametrs")
                        .WithMany("CPU")
                        .HasForeignKey("ParametrsId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DAL.Entities.CPURAMoptions", "RAMoptions")
                        .WithMany("CPU")
                        .HasForeignKey("RAMoptionsId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DAL.Entities.CPUThermalCharacteristicks", "ThermalCharacteristicks")
                        .WithMany("CPU")
                        .HasForeignKey("ThermalCharacteristicksId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("CoreAndArchitecture");

                    b.Navigation("Country");

                    b.Navigation("FrequencyAndOverclockingCapability");

                    b.Navigation("GPU");

                    b.Navigation("Parametrs");

                    b.Navigation("RAMoptions");

                    b.Navigation("ThermalCharacteristicks");
                });

            modelBuilder.Entity("DAL.Entities.GPU", b =>
                {
                    b.HasOne("DAL.Entities.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId");

                    b.HasOne("DAL.Entities.GPUConnection", "GPUConnection")
                        .WithMany("GPU")
                        .HasForeignKey("GPUConnectionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DAL.Entities.GPUCoolingSystem", "GPUCoolingSystem")
                        .WithMany("GPU")
                        .HasForeignKey("GPUCoolingSystemId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DAL.Entities.GPUGeneralParametrs", "GPUGeneralParametrs")
                        .WithMany("GPU")
                        .HasForeignKey("GPUGeneralParametrsId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DAL.Entities.GPUImageOutput", "GPUImageOutput")
                        .WithMany("GPU")
                        .HasForeignKey("GPUImageOutputId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DAL.Entities.GPUVideoMemorySpecific", "GPUVideoMemorySpecific")
                        .WithMany("GPU")
                        .HasForeignKey("GPUVideoMemorySpecificId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DAL.Entities.GPUVideoProcessorSpecific", "GPUVideoProcessorSpecific")
                        .WithMany("GPU")
                        .HasForeignKey("GPUVideoProcessorSpecificId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Country");

                    b.Navigation("GPUConnection");

                    b.Navigation("GPUCoolingSystem");

                    b.Navigation("GPUGeneralParametrs");

                    b.Navigation("GPUImageOutput");

                    b.Navigation("GPUVideoMemorySpecific");

                    b.Navigation("GPUVideoProcessorSpecific");
                });

            modelBuilder.Entity("DAL.Entities.HDD", b =>
                {
                    b.HasOne("DAL.Entities.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId");

                    b.HasOne("DAL.Entities.HDDAdditionally", "HDDAdditionally")
                        .WithMany("HDD")
                        .HasForeignKey("HDDAdditionallyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DAL.Entities.HDDMechanicsAndReliability", "HDDMechanicsAndReliability")
                        .WithMany("HDD")
                        .HasForeignKey("HDDMechanicsAndReliabilityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DAL.Entities.HDDStorageDevice", "HDDStorageDevice")
                        .WithMany("HDD")
                        .HasForeignKey("HDDStorageDeviceId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Country");

                    b.Navigation("HDDAdditionally");

                    b.Navigation("HDDMechanicsAndReliability");

                    b.Navigation("HDDStorageDevice");
                });

            modelBuilder.Entity("DAL.Entities.MB", b =>
                {
                    b.HasOne("DAL.Entities.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId");

                    b.HasOne("DAL.Entities.MBAudio", "MBAudio")
                        .WithMany("MB")
                        .HasForeignKey("MBAudioId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DAL.Entities.MBBackPanel", "MBBackPanel")
                        .WithMany("MB")
                        .HasForeignKey("MBBackPanelId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DAL.Entities.MBCollingAndPower", "MBCollingAndPower")
                        .WithMany("MB")
                        .HasForeignKey("MBCollingAndPowerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DAL.Entities.MBExpensionSlots", "MBExpensionSlots")
                        .WithMany("MB")
                        .HasForeignKey("MBExpensionSlotsId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DAL.Entities.MBFormFactor", "MBFormFactor")
                        .WithMany("MB")
                        .HasForeignKey("MBFormFactorId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DAL.Entities.MBInternalConnectors", "MBInternalConnectors")
                        .WithMany("MB")
                        .HasForeignKey("MBInternalConnectorsId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DAL.Entities.MBRAM", "MBRAM")
                        .WithMany("MB")
                        .HasForeignKey("MBRAMId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DAL.Entities.MBStorageDevice", "MBStorageDevice")
                        .WithMany("MB")
                        .HasForeignKey("MBStorageDeviceId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DAL.Entities.MBWeb", "MBWeb")
                        .WithMany("MB")
                        .HasForeignKey("MBWebId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DAL.Entities.MbCPUandChipset", "MbCPUandChipset")
                        .WithMany("MB")
                        .HasForeignKey("MbCPUandChipsetId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Country");

                    b.Navigation("MBAudio");

                    b.Navigation("MBBackPanel");

                    b.Navigation("MBCollingAndPower");

                    b.Navigation("MBExpensionSlots");

                    b.Navigation("MBFormFactor");

                    b.Navigation("MBInternalConnectors");

                    b.Navigation("MBRAM");

                    b.Navigation("MBStorageDevice");

                    b.Navigation("MBWeb");

                    b.Navigation("MbCPUandChipset");
                });

            modelBuilder.Entity("DAL.Entities.PS", b =>
                {
                    b.HasOne("DAL.Entities.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId");

                    b.HasOne("DAL.Entities.PSCablesAndConnectors", "PSCablesAndConnectors")
                        .WithMany("PS")
                        .HasForeignKey("PSCablesAndConnectorsId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DAL.Entities.PSCertification", "PSCertification")
                        .WithMany("PS")
                        .HasForeignKey("PSCertificationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DAL.Entities.PSCoolingSystem", "PSCoolingSystem")
                        .WithMany("PS")
                        .HasForeignKey("PSCoolingSystemId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DAL.Entities.PSElectricalParametrs", "PSElectricalParametrs")
                        .WithMany("PS")
                        .HasForeignKey("PSElectricalParametrsId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Country");

                    b.Navigation("PSCablesAndConnectors");

                    b.Navigation("PSCertification");

                    b.Navigation("PSCoolingSystem");

                    b.Navigation("PSElectricalParametrs");
                });

            modelBuilder.Entity("DAL.Entities.RAM", b =>
                {
                    b.HasOne("DAL.Entities.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId");

                    b.HasOne("DAL.Entities.RAMKitVolumeAndComposition", "RAMKitVolumeAndComposition")
                        .WithMany("RAM")
                        .HasForeignKey("RAMKitVolumeAndCompositionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DAL.Entities.RAMPerformance", "RAMPerformance")
                        .WithMany("RAM")
                        .HasForeignKey("RAMPerformanceId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DAL.Entities.RAMTimings", "RAMTimings")
                        .WithMany("RAM")
                        .HasForeignKey("RAMTimingsId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Country");

                    b.Navigation("RAMKitVolumeAndComposition");

                    b.Navigation("RAMPerformance");

                    b.Navigation("RAMTimings");
                });

            modelBuilder.Entity("DAL.Entities.SSD", b =>
                {
                    b.HasOne("DAL.Entities.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId");

                    b.HasOne("DAL.Entities.SSDMainCharacteristics", "SSDMainCharacteristics")
                        .WithMany("SSD")
                        .HasForeignKey("SSDMainCharacteristicsId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DAL.Entities.SSDSpeedAndPowerConsumption", "SSDSpeedAndPowerConsumption")
                        .WithMany("SSD")
                        .HasForeignKey("SSDSpeedAndPowerConsumptionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Country");

                    b.Navigation("SSDMainCharacteristics");

                    b.Navigation("SSDSpeedAndPowerConsumption");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("DAL.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("DAL.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("DAL.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DAL.Entities.CPUCoreAndArchitecture", b =>
                {
                    b.Navigation("CPU");
                });

            modelBuilder.Entity("DAL.Entities.CPUFrequencyAndOverclockingCapability", b =>
                {
                    b.Navigation("CPU");
                });

            modelBuilder.Entity("DAL.Entities.CPUGeneralParametrs", b =>
                {
                    b.Navigation("CPU");
                });

            modelBuilder.Entity("DAL.Entities.CPUGraphicsCore", b =>
                {
                    b.Navigation("CPU");
                });

            modelBuilder.Entity("DAL.Entities.CPURAMoptions", b =>
                {
                    b.Navigation("CPU");
                });

            modelBuilder.Entity("DAL.Entities.CPUThermalCharacteristicks", b =>
                {
                    b.Navigation("CPU");
                });

            modelBuilder.Entity("DAL.Entities.GPUConnection", b =>
                {
                    b.Navigation("GPU");
                });

            modelBuilder.Entity("DAL.Entities.GPUCoolingSystem", b =>
                {
                    b.Navigation("GPU");
                });

            modelBuilder.Entity("DAL.Entities.GPUGeneralParametrs", b =>
                {
                    b.Navigation("GPU");
                });

            modelBuilder.Entity("DAL.Entities.GPUImageOutput", b =>
                {
                    b.Navigation("GPU");
                });

            modelBuilder.Entity("DAL.Entities.GPUVideoMemorySpecific", b =>
                {
                    b.Navigation("GPU");
                });

            modelBuilder.Entity("DAL.Entities.GPUVideoProcessorSpecific", b =>
                {
                    b.Navigation("GPU");
                });

            modelBuilder.Entity("DAL.Entities.HDDAdditionally", b =>
                {
                    b.Navigation("HDD");
                });

            modelBuilder.Entity("DAL.Entities.HDDMechanicsAndReliability", b =>
                {
                    b.Navigation("HDD");
                });

            modelBuilder.Entity("DAL.Entities.HDDStorageDevice", b =>
                {
                    b.Navigation("HDD");
                });

            modelBuilder.Entity("DAL.Entities.MBAudio", b =>
                {
                    b.Navigation("MB");
                });

            modelBuilder.Entity("DAL.Entities.MBBackPanel", b =>
                {
                    b.Navigation("MB");
                });

            modelBuilder.Entity("DAL.Entities.MBCollingAndPower", b =>
                {
                    b.Navigation("MB");
                });

            modelBuilder.Entity("DAL.Entities.MbCPUandChipset", b =>
                {
                    b.Navigation("MB");
                });

            modelBuilder.Entity("DAL.Entities.MBExpensionSlots", b =>
                {
                    b.Navigation("MB");
                });

            modelBuilder.Entity("DAL.Entities.MBFormFactor", b =>
                {
                    b.Navigation("MB");
                });

            modelBuilder.Entity("DAL.Entities.MBInternalConnectors", b =>
                {
                    b.Navigation("MB");
                });

            modelBuilder.Entity("DAL.Entities.MBRAM", b =>
                {
                    b.Navigation("MB");
                });

            modelBuilder.Entity("DAL.Entities.MBStorageDevice", b =>
                {
                    b.Navigation("MB");
                });

            modelBuilder.Entity("DAL.Entities.MBWeb", b =>
                {
                    b.Navigation("MB");
                });

            modelBuilder.Entity("DAL.Entities.PSCablesAndConnectors", b =>
                {
                    b.Navigation("PS");
                });

            modelBuilder.Entity("DAL.Entities.PSCertification", b =>
                {
                    b.Navigation("PS");
                });

            modelBuilder.Entity("DAL.Entities.PSCoolingSystem", b =>
                {
                    b.Navigation("PS");
                });

            modelBuilder.Entity("DAL.Entities.PSElectricalParametrs", b =>
                {
                    b.Navigation("PS");
                });

            modelBuilder.Entity("DAL.Entities.RAMKitVolumeAndComposition", b =>
                {
                    b.Navigation("RAM");
                });

            modelBuilder.Entity("DAL.Entities.RAMPerformance", b =>
                {
                    b.Navigation("RAM");
                });

            modelBuilder.Entity("DAL.Entities.RAMTimings", b =>
                {
                    b.Navigation("RAM");
                });

            modelBuilder.Entity("DAL.Entities.SSDMainCharacteristics", b =>
                {
                    b.Navigation("SSD");
                });

            modelBuilder.Entity("DAL.Entities.SSDSpeedAndPowerConsumption", b =>
                {
                    b.Navigation("SSD");
                });
#pragma warning restore 612, 618
        }
    }
}
